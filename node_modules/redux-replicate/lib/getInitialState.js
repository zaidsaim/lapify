'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extractReducerKeys2 = require('./extractReducerKeys');

var _extractReducerKeys3 = _interopRequireDefault(_extractReducerKeys2);

var _storeKeysEqual = require('./storeKeysEqual');

var _storeKeysEqual2 = _interopRequireDefault(_storeKeysEqual);

var _actionTypes = require('./actionTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getInitialState = function getInitialState(store, replication) {
  var replicators = [].concat(replication.replicator);
  var initReplicators = replicators.filter(function (replicator) {
    if (replicator.onReady) {
      store.onReady(replicator.onReady);
    }
    // just the replicators with `getInitialState`
    return typeof replicator.getInitialState === 'function';
  });

  // need this for multiple replication enhancers
  store.initializingReplication = (store.initializingReplication || 0) + 1;
  store.initializedReplication = false;

  var waitCount = 1;
  var setInitialState = false;
  var actualInitialState = replication.reducerKeys ? {} : null;
  var clear = function clear() {
    if (--waitCount === 0) {
      if (setInitialState) {
        store.setState(actualInitialState, true);
      }

      if (--store.initializingReplication === 0) {
        // all replication enhancers initialized, so we can clear all callbacks
        while (store.readyCallbacks.length) {
          store.readyCallbacks.shift()({ store: store });
        }
        store.initializedReplication = true;
        // these are only used during initialization
        delete replication.create;
        delete replication.clientState;
        delete replication.creatorStore;
        store.dispatch({ type: _actionTypes.FULLY_INITIALIZED });
      }
    }
  };

  if (!store.key) {
    clear();
    return;
  }

  var key = store.key;

  var currentState = store.getState();

  var shouldReplicate = function shouldReplicate(reducerKey) {
    return replication.create || replication.clientState && (!reducerKey || typeof replication.clientState[reducerKey] !== 'undefined');
  };

  var initState = function initState(_ref) {
    var getInitialState = _ref.getInitialState,
        onStateChange = _ref.onStateChange;
    return function (reducerKey) {
      var clientState = reducerKey ? replication.clientState && replication.clientState[reducerKey] : replication.clientState;
      var initProps = {
        reducerKey: reducerKey,
        nextState: reducerKey ? currentState[reducerKey] : currentState,
        queryable: _typeof(replication.queryable) === 'object' ? replication.queryable[reducerKey] : replication.queryable,
        create: replication.create,
        clientState: clientState
      };

      store.dispatch(_extends({ type: _actionTypes.GET_INITIAL_STATE }, initProps));
      waitCount++;

      getInitialState({
        store: store,
        reducerKey: reducerKey,
        clientState: clientState,
        setState: function setState(state) {
          if (typeof state === 'undefined') {
            if (onStateChange && shouldReplicate(reducerKey)) {
              var action = _extends({ type: _actionTypes.REPLICATE_INITIAL_STATE }, initProps);

              store.dispatch(action);
              waitCount++;

              onStateChange(_extends({}, initProps, {
                store: store,
                action: action,
                setState: function setState(state) {
                  store.setState(state, true);
                  store.dispatch(_extends({
                    type: _actionTypes.REPLICATED_INITIAL_STATE }, initProps, { state: state
                  }));
                  clear();
                },
                setStatus: function setStatus(status) {
                  store.dispatch(_extends({
                    type: _actionTypes.REPLICATED_INITIAL_STATE }, initProps, { status: status
                  }));
                  clear();
                },
                setError: function setError(error) {
                  store.dispatch(_extends({
                    type: _actionTypes.STATE_CHANGE_ERROR }, initProps, { error: error
                  }));
                  clear();
                }
              }));
            }
          } else if ((0, _storeKeysEqual2.default)(key, store.key)) {
            if (reducerKey) {
              actualInitialState[reducerKey] = state;
            } else {
              actualInitialState = state;
            }
            setInitialState = true;
          }

          store.dispatch(_extends({ type: _actionTypes.GOT_INITIAL_STATE }, initProps, { state: state }));
          clear();
        },
        setError: function setError(error) {
          store.dispatch(_extends({ type: _actionTypes.INITIAL_STATE_ERROR }, initProps, { error: error }));
          clear();
        }
      });
    };
  };

  if (replication.reducerKeys) {
    var _extractReducerKeys = (0, _extractReducerKeys3.default)(replication, currentState),
        getReducerKeys = _extractReducerKeys.getReducerKeys,
        setReducerKeys = _extractReducerKeys.setReducerKeys;

    if (setReducerKeys) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = replicators[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var replicator = _step.value;

          if (replicator.onStateChange) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = setReducerKeys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var reducerKey = _step2.value;

                if (shouldReplicate(reducerKey)) {
                  (function () {
                    var setProps = {
                      reducerKey: reducerKey,
                      nextState: reducerKey ? currentState[reducerKey] : currentState,
                      queryable: _typeof(replication.queryable) === 'object' ? replication.queryable[reducerKey] : replication.queryable,
                      create: replication.create,
                      clientState: reducerKey ? replication.clientState && replication.clientState[reducerKey] : replication.clientState
                    };

                    var action = _extends({ type: _actionTypes.REPLICATE_INITIAL_STATE }, setProps);

                    store.dispatch(action);
                    waitCount++;

                    replicator.onStateChange(_extends({}, setProps, {
                      store: store,
                      action: action,
                      setState: function setState(state) {
                        store.setState(state, true);
                        store.dispatch(_extends({
                          type: _actionTypes.REPLICATED_INITIAL_STATE }, setProps, { state: state
                        }));
                        clear();
                      },
                      setStatus: function setStatus(status) {
                        store.dispatch(_extends({
                          type: _actionTypes.REPLICATED_INITIAL_STATE }, setProps, { status: status
                        }));
                        clear();
                      },
                      setError: function setError(error) {
                        store.dispatch(_extends({
                          type: _actionTypes.STATE_CHANGE_ERROR }, setProps, { error: error
                        }));
                        clear();
                      }
                    }));
                  })();
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = initReplicators[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _replicator = _step3.value;

        var initReducerState = initState(_replicator);

        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = getReducerKeys[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var _reducerKey = _step4.value;

            initReducerState(_reducerKey);
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }
  } else {
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = initReplicators[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var _replicator2 = _step5.value;

        initState(_replicator2)();
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  }

  clear();
};

exports.default = getInitialState;