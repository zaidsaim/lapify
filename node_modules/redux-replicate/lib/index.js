'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FULLY_INITIALIZED = exports.SET_STATE = exports.STATE_CHANGE_ERROR = exports.REPLICATED_STATE = exports.REPLICATE_STATE = exports.REPLICATED_INITIAL_STATE = exports.REPLICATE_INITIAL_STATE = exports.INITIAL_STATE_ERROR = exports.GOT_INITIAL_STATE = exports.GET_INITIAL_STATE = exports.storeKeysEqual = exports.replicate = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _getInitialState = require('./getInitialState');

var _getInitialState2 = _interopRequireDefault(_getInitialState);

var _performReplication = require('./performReplication');

var _performReplication2 = _interopRequireDefault(_performReplication);

var _storeKeysEqual = require('./storeKeysEqual');

var _storeKeysEqual2 = _interopRequireDefault(_storeKeysEqual);

var _actionTypes = require('./actionTypes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a Redux store enhancer designed to replicate actions and states.
 *
 * @param {Object} options
 * @return {Function}
 * @api public
 */
var replicate = function replicate(replication) {
  return function (next) {
    return function (reducer, initialState, enhancer) {
      var store = null;

      replication = _extends({}, replication);

      var replicatedReducer = function replicatedReducer(state, action) {
        var nextState = state;

        if (action.type === _actionTypes.SET_STATE && !action.mergedState) {
          if (replication.reducerKeys) {
            nextState = _extends({}, state, action.nextState);
          } else {
            nextState = action.nextState;
          }

          // if replication applied multiple times, ensure merge occurs only once
          action.mergedState = true;
        }

        nextState = reducer(nextState, action);

        if (!action._skipReplication) {
          (0, _performReplication2.default)(store, replication, state, nextState, action);
        }

        return nextState;
      };

      store = next(replicatedReducer, initialState, enhancer);

      if (!store.replication) {
        store.replication = [];
      }
      store.replication.push(replication);

      if (!store.onReady) {
        store.readyCallbacks = [];
        store.onReady = function (readyCallback) {
          return store.readyCallbacks.push(readyCallback);
        };
      }

      if (typeof replication.key !== 'undefined') {
        store.key = replication.key;
      }

      if (!store.setKey) {
        store.setKey = function (key, readyCallback) {
          store.key = key;

          if (readyCallback) {
            store.onReady(readyCallback);
          }

          store.replication.forEach(function (replication) {
            (0, _getInitialState2.default)(store, replication);
          });
        };
      }

      if (!store.setState) {
        store.setState = function (nextState, _skipReplication, __create) {
          store.dispatch({
            type: _actionTypes.SET_STATE,
            nextState: nextState,
            _skipReplication: _skipReplication,
            __create: __create // TODO: clean this up
          });
        };
      }

      (0, _getInitialState2.default)(store, replication);
      return store;
    };
  };
};

exports.default = replicate;
exports.replicate = replicate;
exports.storeKeysEqual = _storeKeysEqual2.default;
exports.GET_INITIAL_STATE = _actionTypes.GET_INITIAL_STATE;
exports.GOT_INITIAL_STATE = _actionTypes.GOT_INITIAL_STATE;
exports.INITIAL_STATE_ERROR = _actionTypes.INITIAL_STATE_ERROR;
exports.REPLICATE_INITIAL_STATE = _actionTypes.REPLICATE_INITIAL_STATE;
exports.REPLICATED_INITIAL_STATE = _actionTypes.REPLICATED_INITIAL_STATE;
exports.REPLICATE_STATE = _actionTypes.REPLICATE_STATE;
exports.REPLICATED_STATE = _actionTypes.REPLICATED_STATE;
exports.STATE_CHANGE_ERROR = _actionTypes.STATE_CHANGE_ERROR;
exports.SET_STATE = _actionTypes.SET_STATE;
exports.FULLY_INITIALIZED = _actionTypes.FULLY_INITIALIZED;