'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extractReducerKeys;
function extractReducerKeys(replication, state) {
  var clientState = replication.clientState;
  var reducerKeys = replication.reducerKeys;

  var getReducerKeys = reducerKeys;
  var setReducerKeys = null;

  if (reducerKeys === true) {
    reducerKeys = Object.keys(state);
    getReducerKeys = reducerKeys;
  }

  // here we want the client to get only the undefined initial states
  if (clientState) {
    getReducerKeys = [];
    setReducerKeys = [];

    if (Array.isArray(reducerKeys)) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = reducerKeys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var reducerKey = _step.value;

          if (typeof clientState[reducerKey] === 'undefined') {
            getReducerKeys.push(reducerKey);
          } else {
            setReducerKeys.push(reducerKey);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    } else {
      // if reducerKeys is an object, truthy values indicate keys that
      // can be overridden by the client
      for (var _reducerKey in reducerKeys) {
        if (reducerKeys[_reducerKey] && typeof clientState[_reducerKey] === 'undefined') {
          getReducerKeys.push(_reducerKey);
        } else {
          setReducerKeys.push(_reducerKey);
        }
      }

      reducerKeys = Object.keys(reducerKeys);
    }
  }

  replication.reducerKeys = reducerKeys;

  return { getReducerKeys: getReducerKeys, setReducerKeys: setReducerKeys };
}